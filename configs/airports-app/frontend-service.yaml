apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: ${NAMESPACE}
  labels:
    component: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      component: frontend
  template:
    metadata:
      labels:
        component: frontend
        access-countries: "1"
        access-runways: "1"
        access-airports: "1"
        access-runways-country: "1"
    spec:
      containers:
        - name: frontend
          image: ${GCLOUD_HOSTNAME}/${GCLOUD_PROJECTNAME}/frontend:${SERVICE_FRONTEND_VER}
          resources:
            limits:
              cpu: "350m"
              memory: 256Mi
            requests:
              cpu: "200m"
              memory: 64Mi
          ports:
            - containerPort: 8080
          env:
            - name: SERVICE_AIRPORTS
              value: 'http://airports.${NAMESPACE}.svc.cluster.local'
            - name: SERVICE_RUNWAYS
              value: 'http://runways.${NAMESPACE}.svc.cluster.local'
            - name: SERVICE_COUNTRIES
              value: 'http://countries.${NAMESPACE}.svc.cluster.local'
            - name: SERVICE_RUNWAYSCOUNTRY
              value: 'http://runways-country.${NAMESPACE}.svc.cluster.local'
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /alive
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: ${NAMESPACE}
spec:
  ports:
    -  name: transport
       port: 80
       protocol: TCP
       targetPort: 8080
  selector:
    component: frontend
  type: LoadBalancer
